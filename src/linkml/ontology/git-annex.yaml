id: https://concepts.datalad.org/ontology/git-annex
name: git-annex
title: Git-annex concepts
description: >
  TODO
prefixes:
  annex: https://concepts.datalad.org/ns/annex-uuid/
  annexkey: https://concepts.datalad.org/ns/annex-key/
  dlco: https://concepts.datalad.org/ontology/
imports:
  - ../ontology/datasets
  - ../ontology/properties
default_prefix: dlco


slots:
  has_annex_remote:
    description: >-
      A git-annex (special) remote associated with a repository
    range: AnnexRemote


classes:
  AnnexRemote:
    # The basic idea behind this mixin approach (apart from the fact that linkml
    # more or less forced it on us) is that we have more or less separate class
    # hierarchies within each ontology component, and the alignment between
    # concepts is expressed via mixin relationships. We declare many classes
    # mixins, because linkml only allows mixin classes to be derived from other
    # mixins
    mixin: true
    is_a: DataService
    description: >-
      A git-annex (special) remote.
    slots:
      - uuid
    slot_usage:
      uuid:
        required: true
    todos:
      - Add support for remote (not key) specific parameters. `DataService` only
        has `endpoint_url`

  QualifiedAnnexAccess:
    is_a: QualifiedAccess
    description: >-
      An association class for attaching additional information to an
      `access_service` relationship between a `DCAT:Distribution` and
      a `dlco:AnnexRemote`.
    slot_usage:
      relation:
        range: AnnexRemote
    todos:
      - >
        We already support the case of an alternative identifier
        (via `QualifiedAccess`). However, for `AnnexRemote` we might also need
        to support expressing the state of a key at a remote
        (see `SET/GETSTATE` at
        https://git-annex.branchable.com/design/external_special_remote_protocol).
        A state is more or less an additional/arbitrary set of parameters.

  StableAnnexKey:
    mixin: true
    is_a: Distribution
    description: >-
      Git-annex file content blob. Keys are identified with a name. This
      class represents keys with a stable, content-based key name, such
      as MD5, SHA1, SHA256 and any cryptographically secure backend,
      including the "E" variants. Importantly, not `URL` keys.
    slots:
      - name
    slot_usage:
      qualified_access:
        range: QualifiedAnnexAccess
    see_also:
      - https://git-annex.branchable.com/internals/key_format/
      - https://git-annex.branchable.com/backends/
