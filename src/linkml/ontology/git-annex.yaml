id: https://concepts.datalad.org/ontology/git-annex
name: git-annex
title: Git-annex concepts
description: >
  TODO
prefixes:
  annex: https://concepts.datalad.org/namespace/annex-uuid/
  dlco: https://concepts.datalad.org/ontology/
imports:
  - ../ontology/datasets
  - ../ontology/git
  - ../ontology/properties
default_prefix: dlco


slots:
  has_annex_remote:
    description: >-
      A git-annex (special) remote associated with a repository
    range: AnnexRemote


classes:
  AnnexRemote:
    # The basic idea behind this mixin approach (apart from the fact that linkml
    # more or less forced it on us) is that we have more or less separate class
    # hierarchies within each ontology component, and the alignment between
    # concepts is expressed via mixin relationships. We declare many classes
    # mixins, because linkml only allows mixin classes to be derived from other
    # mixins
    mixin: true
    is_a: DataService
    description: >-
      A git-annex (special) remote.
    slots:
      - uuid
    slot_usage:
      uuid:
        required: true

  QualifiedAnnexAccess:
    is_a: QualifiedAccess
    description: >-
      An association class for attaching additional information to an
      `access_service` relationship between a `DCAT:Distribution` and
      a `dlco:AnnexRemote`.
    slot_usage:
      relation:
        range: AnnexRemote

  AnnexedFile:
    mixin: true
    is_a: FileInGit
      #is_a: FileInGit
    description: >-
      A file in a Git repository that is managed by git-annex.
    slot_usage:
      distribution:
        range: AnnexDistribution

  AnnexDistribution:
    mixin: true
    is_a: Distribution
    description: >-
      A distribution that is accessible via git-annex.
    slot_usage:
      qualified_access:
        range: QualifiedAnnexAccess
