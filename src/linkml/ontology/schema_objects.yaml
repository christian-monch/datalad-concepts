id: https://concepts.datalad.org/ontology/schema_objects
name: meta_objects
title: 
description: >-
  Class definitions are generic and only document the semantic relationships
  of schema metadata objects and ontology concept, not the structural
  properties of the schema elements.

  This collection is for documentation only, and should not be imported outside
  of this ontology. This may change once linkml starts to support import
  namespaces.
prefixes:
  dlco: https://concepts.datalad.org/ontology/
notes:
  - The class definitions below should be suitable for copy&paste as starting
    points when composing new schemas.
  - All classes here must derive directly from `MetadataObject`. The derivation
    setup in a particular schema may be different for structural reasons.
  - The description of each class must link the respective ontology concept
    that is implemented, e.g.
    `[X](https://concepts.datalad.org/ontology/X)`


classes:
  Objects:
    class_uri: dlco:Objects
    is_a: MetadataObject
    description: >-
      A container for metadata objects.
    attributes:
      objects:
        description: >-
          Object list.
        multivalued: true
        range: MetadataObject

  TypedObject:
    class_uri: dlco:TypedObject
    is_a: MetadataObject
    mixins:
      - HasRequiredMetaTypeDesignator
    description: >-
      Base class for any recognized metadata object type.

  GUIDedTypedObject:
    class_uri: dlco:GUIDedTypedObject
    is_a: MetadataObject
    description: >-
      Metadata object that is globally uniquely identified
      with a URI or CURIE.
    slots:
      - meta_id

  DUIDedTypedObject:
    class_uri: dlco:DUIDedTypedObject
    is_a: MetadataObject
    description: >-
      Metadata object that is uniquely identified within a
      metadata document by some code.
    slots:
      - meta_code

  GitShaIDedObject:
    class_uri: dlco:GitShaIDedObject
    is_a: MetadataObject
    description: >-
      Representation for any resource tracked by Git, thereby having a unique
      `gitsha`-based identifier.
    comments:
      - This is the base class of any entity that is directly tracked by Git.
    slot_usage:
      meta_id:
        description: >-
          SHA1 based identifier in the form of a CURIE with an explicit
          `gitsha:` namespace prefix.
        equals_expression: '"gitsha:" + {gitsha}'
        pattern: "^gitsha:[0-9a-f]{40}$"

  QualifiedGitShaIDedPartObject:
    class_uri: dlco:QualifiedGitShaIDedPartObject
    is_a: MetadataObject
    mixins:
      - QualifiedPart
    description: >-
      Metadata object for a [QualifiedPart](https://concepts.datalad.org/ontology/QualifiedPart).
      Every part is represented by a [GitShaIDedObject](https://concepts.datalad.org/ontology/GitShaIDedObject).
    slot_usage:
      relation:
        range: GitShaIDedObject

  QualifiedAnnexAccessObject:
    class_uri: dlco:QualifiedAnnexAccessObject
    is_a: MetadataObject
    mixins:
      - QualifiedAnnexAccess
    description: >-
      Metadata object for a [QualifiedAnnexAccess](https://concepts.datalad.org/ontology/QualifiedAnnexAccess).
    slot_usage:
      relation:
        range: AnnexRemoteObject

  AnnexRemoteObject:
    class_uri: dlco:AnnexRemoteObject
    is_a: MetadataObject
    mixins:
      - AnnexRemote
    description: >-
      Metadata object for a [AnnexRemote](https://concepts.datalad.org/ontology/AnnexRemote).
    slots:
      - meta_id
    slot_usage:
      meta_id:
        equals_expression: '"annex:" + {uuid}'

  DataladDatasetVersionObject:
    class_uri: dlco:DataladDatasetVersionObject
    is_a: MetadataObject
    mixins:
      - DataladDatasetVersion
    description: >-
      Metadata object for a [DataladDatasetVersion](https://concepts.datalad.org/ontology/DataladDatasetVersion).
    slot_usage:
      distribution:
        multivalued: false
        range: GitTreeObject
      has_annex_remote:
        multivalued: true
        range: AnnexRemoteObject
        todos:
          - see TODO in DataladDatasetVersion re this slot
      has_part:
        multivalued: true
        range: GitShaIDedObject
      is_version_of:
        range: DataladDatasetObject
      qualified_part:
        multivalued: true
        range: QualifiedGitShaIDedPartObject
      tree:
        multivalued: false
        range: GitTreeObject
      was_derived_from:
        multivalued: true
        range: DataladDatasetVersionObject
      was_generated_by:
        range: CommitActivityObject

  GitTreeObject:
    class_uri: dlco:GitTreeObject
    is_a: MetadataObject
    mixins:
      - GitTree
    description: >-
      Metadata object for a [GitTree](https://concepts.datalad.org/ontology/GitTree).
    slot_usage:
      qualified_part:
        multivalued: true
        range: FilesystemDirectoryItemObject

  FilesystemDirectoryItemObject:
    class_uri: dlco:FilesystemDirectoryItemObject
    is_a: MetadataObject
    mixins:
      - FilesystemDirectoryItem
    description: >-
      Metadata object for a [FilesystemDirectoryItem](https://concepts.datalad.org/ontology/FilesystemDirectoryItem).
    slots:
      - relation
    slot_usage:
      relation:
        # union range specification does not seem to work
        #any_of:
        #  - range: GitShaIDedObject
        #  - range: StableAnnexKeyObject
        range: GUIDedTypedObject
    todos:
      - figure out why a union range specification is not working

  CommitActivityObject:
    class_uri: dlco:CommitActivityObject
    is_a: MetadataObject
    mixins:
      - CommitActivity
    description: >-
      Metadata object for a [CommitActivity](https://concepts.datalad.org/ontology/CommitActivity).
    slot_usage:
      was_associated_with:
        range: GitUserAgentObject
      was_informed_by:
        range: AuthorActivityObject

  AuthorActivityObject:
    class_uri: dlco:AuthorActivityObject
    is_a: MetadataObject
    mixins:
      - AuthorActivity
    description: >-
      Metadata object for a [AuthorActivity](https://concepts.datalad.org/ontology/AuthorActivity).
    slot_usage:
      was_associated_with:
        range: GitUserAgentObject

  GitUserAgentObject:
    class_uri: dlco:GitUserAgentObject
    is_a: MetadataObject
    mixins:
      - GitUserAgent
    slots:
      - meta_code
    description: >-
      Metadata object for a [GitUserAgent](https://concepts.datalad.org/ontology/GitUserAgent).

  DataladDatasetObject:
    class_uri: dlco:DataladDatasetObject
    is_a: MetadataObject
    description: >-
      Metadata object for a [DataladDataset](https://concepts.datalad.org/ontology/DataladDataset).
    see_also: 
      - dlco:DataladDataset
    comments:
      - The required identifier format is `datalad:<dataset-uuid>`.
    mixins:
      - DataladDataset
    slot_usage:
      meta_id:
        equals_expression: '"datalad:" + {uuid}'

  GitBlobObject:
    class_uri: dlco:GitBlobObject
    is_a: MetadataObject
    mixins:
      - GitBlob
    description: >-
      Metadata object for a [GitBlob](https://concepts.datalad.org/ontology/GitBlob).

  StableAnnexKeyObject:
    class_uri: dlco:StableAnnexKeyObject
    is_a: MetadataObject
    mixins:
      - StableAnnexKey
    description: >-
      Metadata object for a [StableAnnexKey](https://concepts.datalad.org/ontology/StableAnnexKey).
    slots:
      - meta_id
    slot_usage:
      qualified_access:
        multivalued: true
        range: QualifiedAnnexAccessObject
