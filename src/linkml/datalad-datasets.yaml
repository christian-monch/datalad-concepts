# models for DataLad datasets

id: https://concepts.datalad.org/datalad-datasets
name: datalad-datasets
prefixes:
  dlco: https://concepts.datalad.org/
  dct: http://purl.org/dc/terms/
imports:
  - datasets
  - types

slots:
  objtype:
    designates_type: true
    description: >-
      Type designator.
    #range: uriorcurie
    range: string

  id:
    identifier: true
    description: >-
      Unique identifier.
    range: string

enums:
  DirectoryItemType:
    # TODO add 'meaning' to all these
    permissible_values:
      file:
      executable_file:
      directory:
      symlink:

classes:
  TypedThing:
    description: >-
      Object with a type designator.
    slots:
      - objtype

  IdentifiedThing:
    mixin: true
    slots:
      - id
  FileContent:
    is_a: TypedThing
    mixins:
      - IdentifiedThing
    description: >-
      File content. More or less an analog of the POSIX filesystem file,
      which is also name-less content.
    attributes:
      available_at:
        description: >-
          Information on where the file content is located, and could
          potentially be obtained from.
        range: ObjectAvailability
        # we inline, because any record here should be globally unique,
        # and not have another use outside the FileContent record.
        # Inlining is therefore the most compact representation.
        # We inline as a list, because neither storage id, nor item id
        # are necessarily unique
        inlined_as_list: true
        multivalued: true

  ObjectAvailability:
    description: >-
      Record of availability of some object in some storage system, under
      a particular identifier.
    attributes:
      access:
        description: >-
          Storage containing the object.
        range: ObjectAccessMethod
      object_id:
        description: >-
          Identifier for the object in the storage.
        range: string

  ObjectAccessMethod:
    is_a: TypedThing
    mixins:
      - IdentifiedThing
    description: >-
      Means to retrieve file content objects.

  GitFetch:
    is_a: ObjectAccessMethod
    attributes:
      url:
        description: >-
          Git fetch URL.
        # TODO type for Git URLs (incl. the :: transport prefix)
        range: string

  GitAnnexSpecialRemote:
    is_a: ObjectAccessMethod
    attributes:
      parameters:
        description: >-
          Parameters to be given to `git annex initremote` in order to
          initialize the remote.
        range: string

  HttpGet:
    is_a: ObjectAccessMethod
    attributes:
      url_template:
        description: >-
          Template of a URL to perform an HTTP GET request against.
          Would be populated with the `object_id` from an associated
          `ObjectAvailability` record, by some kind of mechanism.
        # TODO proper URL template type
        range: string

  ArchiveExtract:
    is_a: ObjectAccessMethod
    attributes:
      archive:
        description: >-
          Archive to extract from.
        range: FileContent
      archive_type:
        description: >-
          Type of archive.
        # TODO enum?
        range: string

  Directory:
    is_a: TypedThing
    mixins:
      - IdentifiedThing
    description: >-
      A container for dataset content.
    attributes:
      items:
        description: >-
          List of items in the directory.
        range: DirectoryItem
        multivalued: true
        inlined: true
        inlined_as_list: false
  DirectoryItem:
    description: >-
      An item in a directory. Assigns a name and other properties to some
      content.
    attributes:
      name:
        description: >-
          Name of a directory item.
        # TODO this should (hopefully) mean that the value is unique
        # within a particular context, not globally, but instead here
        # within a single directory
        identifier: true
      type:
        description: >-
          Identifier of the item type.
        range: DirectoryItemType
      content:
        # we want content to come in separate, identified records, always.
        # this enables referencing across multiple containers (versions,
        # directories, datasets).
        inlined: false
        description: >-
          Content referenced by the directory item.
        any_of:
          - range: FileContent
          - range: Directory
          # TODO: commit/dataset

  Commit:
    is_a: TypedThing
    mixins:
      - IdentifiedThing
    attributes:
      tree:
        # we want content to come in separate, identified records, always.
        # this enables referencing across multiple containers (versions,
        # datasets).
        inlined: false
        description: >-
          Tree referenced by the commit.
        range: Directory
      author:
        slot_uri: dct:author
        # TODO dedicated class for a GitAgent
        range: GitAgent
      committer:
        slot_uri: dct:creator
        range: GitAgent
      created:
        slot_uri: dct:created
        # TODO ISO date type
        range: string
      title:
        range: string
      description:
        range: string

  GitAgent:
    description: >-
      Agent representation in a Git context
    attributes:
      name:
        range: string
      email:
        # TODO email
        range: string

#  DataladDataset:
#    is_a: Dataset
#    description: >-
#      DataLad Dataset
#    slot_usage:
#      id:
#        # it is not a DataLad dataset without the ID
#        identifier: true
#        range: UUID
#
#  DataladDatasetVersion:
#    class_uri: dlco:DataladDatasetVersion
#    is_a: DatasetVersion
#    description: >-
#      DataLad Dataset version/revision/commit
#    slot_usage:
#      id:
#        identifier: true
#        range: SHA1
#      version_of:
#        range: DataladDataset
#        multivalued: false
