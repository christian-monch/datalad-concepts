# models for DataLad datasets

id: https://concepts.datalad.org/datalad-datasets
name: datalad-datasets
prefixes:
  dlco: https://concepts.datalad.org/ontology/
  dct: http://purl.org/dc/terms/
  rdfs: http://www.w3.org/2000/01/rdf-schema#
imports:
  - datasets
  - labeling
  - meta_utils
  - types
default_prefix: dlco


slots:
  id:
    identifier: true
    description: >-
      Unique identifier.
    range: string

enums:
  DirectoryREMOVEMEItemType:
    # TODO add 'meaning' to all these
    permissible_values:
      file:
      executable_file:
      directory:
      symlink:

classes:
  IdentifiedThing:
    mixin: true
    slots:
      - id
  FileContent:
    mixins:
      - IdentifiedThing
      - HasMetaTypeDesignator
    description: >-
      File content. More or less an analog of the POSIX filesystem file,
      which is also name-less content.
    attributes:
      available_at:
        description: >-
          Information on where the file content is located, and could
          potentially be obtained from.
        range: ObjectAvailability
        # we inline, because any record here should be globally unique,
        # and not have another use outside the FileContent record.
        # Inlining is therefore the most compact representation.
        # We inline as a list, because neither storage id, nor item id
        # are necessarily unique
        inlined_as_list: true
        multivalued: true

  ObjectAvailability:
    description: >-
      Record of availability of some object in some storage system, under
      a particular identifier.
    attributes:
      access:
        description: >-
          Storage containing the object.
        range: ObjectAccessMethod
      object_id:
        description: >-
          Identifier for the object in the storage.
        range: string

  ObjectAccessMethod:
    mixins:
      - IdentifiedThing
      - HasMetaTypeDesignator
    description: >-
      Means to retrieve file content objects.

  GitFetch:
    is_a: ObjectAccessMethod
    attributes:
      url:
        description: >-
          Git fetch URL.
        # TODO type for Git URLs (incl. the :: transport prefix)
        range: string

  GitAnnexSpecialRemote:
    is_a: ObjectAccessMethod
    attributes:
      parameters:
        description: >-
          Parameters to be given to `git annex initremote` in order to
          initialize the remote.
        range: string

  HttpGet:
    is_a: ObjectAccessMethod
    attributes:
      url_template:
        description: >-
          Template of a URL to perform an HTTP GET request against.
          Would be populated with the `object_id` from an associated
          `ObjectAvailability` record, by some kind of mechanism.
        # TODO proper URL template type
        range: string

  ArchiveExtract:
    is_a: ObjectAccessMethod
    attributes:
      archive:
        description: >-
          Archive to extract from.
        range: FileContent
      archive_type:
        description: >-
          Type of archive.
        # TODO enum?
        range: string

  DirectoryREMOVEME:
    mixins:
      - IdentifiedThing
      - HasMetaTypeDesignator
    description: >-
      A container for dataset content.
    attributes:
      items:
        description: >-
          List of items in the directory.
        range: DirectoryREMOVEMEItem
        multivalued: true
        inlined: true
        inlined_as_list: false
  DirectoryREMOVEMEItem:
    description: >-
      An item in a directory. Assigns a name and other properties to some
      content.
    slots:
      - name
    slot_usage:
      name:
        description: >-
          Name of a directory item.
        # TODO this should (hopefully) mean that the value is unique
        # within a particular context, not globally, but instead here
        # within a single directory
        identifier: true
    attributes:
      type:
        description: >-
          Identifier of the item type.
        range: DirectoryREMOVEMEItemType
      content:
        # we want content to come in separate, identified records, always.
        # this enables referencing across multiple containers (versions,
        # directories, datasets).
        inlined: false
        description: >-
          Content referenced by the directory item.
        any_of:
          - range: FileContent
          - range: DirectoryREMOVEME
          # TODO: commit/dataset

  Commit:
    mixins:
      - IdentifiedThing
      - HasMetaTypeDesignator
    attributes:
      tree:
        # we want content to come in separate, identified records, always.
        # this enables referencing across multiple containers (versions,
        # datasets).
        inlined: false
        description: >-
          Tree referenced by the commit.
        range: DirectoryREMOVEME
      author:
        description: >-
          Place holder for an actual description
        slot_uri: dct:author
        # TODO dedicated class for a GitAgent
        range: GitAgent
        inlined: false
      committer:
        description: >-
          Place holder for an actual description
        slot_uri: dct:creator
        range: GitAgent
        inlined: false
      created:
        description: >-
          Place holder for an actual description
        slot_uri: dct:created
        # TODO ISO date type
        #range: datetime
        range: string
      title:
        description: >-
          Place holder for an actual description
        range: string
      description:
        description: >-
          Place holder for an actual description
        range: string

  GitAgent:
    mixins:
      - HasMetaTypeDesignator
    description: >-
      Agent representation in a Git context
    slots:
      - name
    slot_usage:
      name:
        description: >-
          Full name of the agent
    attributes:
      # TODO others could use ORCID
      id:
        description: >-
          Place holder for an actual description
        identifier: true
        string_serialization: "{name} <{email}>"
        range: string
      email:
        description: >-
          Place holder for an actual description
        # TODO email
        range: string

#  DataladDataset:
#    is_a: Dataset
#    description: >-
#      DataLad Dataset
#    slot_usage:
#      id:
#        # it is not a DataLad dataset without the ID
#        identifier: true
#        range: UUID
#
#  DataladDatasetVersion:
#    class_uri: dlco:DataladDatasetVersion
#    is_a: DatasetVersion
#    description: >-
#      DataLad Dataset version/revision/commit
#    slot_usage:
#      id:
#        identifier: true
#        range: SHA1
#      version_of:
#        range: DataladDataset
#        multivalued: false
