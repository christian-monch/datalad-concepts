# models for DataLad datasets

id: https://concepts.datalad.org/schemas/datalad-dataset-version
name: datalad-dataset-version-schema
title: DataLad dataset version schema
description: >-
  Schema for document describing a version of a DataLad dataset
  TODO talk about target scope and differentiation to a more
  stream-like/RDF-like representation of individual components
  of such a description that is more suitable for a compact
  description of the evolution of such a dataset across multiple
  versions.
prefixes:
  annex: https://concepts.datalad.org/namespace/annex-uuid/
  datalad: https://concepts.datalad.org/namespace/dataset-uuid/
  DCAT: http://www.w3.org/ns/dcat#
  dcterms: http://purl.org/dc/terms/
  dlco: https://concepts.datalad.org/ontology/
  gitsha: https://concepts.datalad.org/namespace/gitsha/
  prov: http://www.w3.org/ns/prov#
  spdx: http://spdx.org/rdf/terms#
imports:
  - ../ontology/datalad
  - ../ontology/git-annex
default_prefix: dlco

classes:
  DataladDatasetVersionSE:
    mixins:
      - DataladDatasetVersion
    description: >-
      A variant of `dlco:DataladDatasetVersion` with additional properties
      for describing all dataset aspects in a structurally compact fashion
      with minimal duplication overhead.
    slots:
      # TODO move to DataladDatasetVersion
      # only overwrite `range` here to `AnnexRemoteSE` (or maybe even not?!)
      - has_annex_remote
    slot_usage:
      has_annex_remote:
        multivalued: true
        inlined: true
        range: AnnexRemoteSE
      has_part:
        range: AnnexedFileSE
        multivalued: true
        inlined: true
      is_version_of:
        # a defining feature of a DataLad dataset is the association
        # with a dataset concept (all versions) identifier
        required: true
        inlined: true
        range: DataladDatasetSE
      qualified_part:
        range: QualifiedPartSE
        multivalued: true
        inlined: true
        inlined_as_list: true
    comments:
      - The property `has_annex_remote` is for defining all remotes inline
        with a meta_id index key, such that they can be referenced in a
        lean fashion in `QualifiedAnnexAccess` instances.

  DataladDatasetSE:
    mixins:
      - DataladDataset
    description: >-
      Data structure definition class for a `DataladDataset`

  # TODO "SE" is for "SchemaElement" or "StructureElement". The class adds nothing
  # of semantic relevance of the the "AnnexRemote" base class, which comes in as a
  # mixin due to technical(?) limitations of linkml. It merely adds the notion of
  # a required identifier for the metadata object describing an AnnexRemote in the
  # context of this particular schema. We could also have a "DDVS" name suffix
  # (derived from the name of this schema)
  AnnexRemoteSE:
    mixins:
      - AnnexRemote
    description: >-
      Data structure definition class for a `AnnexRemote`
    slots:
      - meta_id
    slot_usage:
      meta_id:
        equals_expression: "annex:{uuid}"

  AnnexedFileSE:
    mixins:
      - AnnexedFile
    description: >-
      Data structure definition class for a `AnnexedFile`
    slots:
      - meta_id
    slot_usage:
      meta_id:
        # this is for the blob that is stored in git, which equals the pointer
        # to an annex objects, but NOT the relpath with the name under which
        # it is registered in a (work)tree
        equals_expression: "gitsha:{gitsha}"
      distribution:
        range: AnnexDistributionSE

  QualifiedPartSE:
    mixins:
      - QualifiedPart
      #  - QualifiedGitTrackedPart
    description: >-
      Data structure definition class for a `QualifiedPart`
    slot_usage:
      relation:
        #range: FileInGit
        range: AnnexedFileSE

  AnnexDistributionSE:
    mixins:
      - AnnexDistribution
    description: >-
      Data structure definition class for a `AnnexDistribution`
    slot_usage:
      qualified_access:
        range: QualifiedAnnexAccessSE

  QualifiedAnnexAccessSE:
    mixins:
      - QualifiedAnnexAccess
    description: >-
      Data structure definition class for a `QualifiedAnnexAccess`
    slot_usage:
      relation:
        range: AnnexRemoteSE
