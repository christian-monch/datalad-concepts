# A dataset version distribution in the form of a Git commit
id: gitsha:eb4d2457a1165519c61859152fe0e3394200d75d
# abusing the documentation as a type definition URL of a Git commit
# TODO define term in `datalad-dataset` schema
type: https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#_git_commit_objects
identifier:
  # a Git SHA
  notation: eb4d2457a1165519c61859152fe0e3394200d75d
  schema_agency: https://git-scm.com
# A hosted (http-accessible) Git repository is the access service for this
# commit and the associated tree.
# We could also consider all of GitHub as an access service, and declare
# `org` and `project as two parameters. This would make sense in a larger
# setup, but here we are trying to be self-contained and minimal --
# applicable to any Git repo hosted anywhere
access_service:
  - https://github.com/datalad-datasets/machinelearning-books.git
relation:
  # we leave inline information on the hosted Git repo in a relation.
  # use id from access_service property above
  - id: https://github.com/datalad-datasets/machinelearning-books.git
    # identify as a dataservice -- not strictly needed for an implementation
    # that wants to obtain the commit, because we have the id from `access_service`
    # to match against
    meta_type: dldist:DataService
    # we use the DOAP (description of a project) term to identify this dataservice
    # as a Git repository.
    # TODO define term in `datalad-dataset` schema
    type: http://usefulinc.com/ns/doap#GitRepository
    # endpoint URL is the cloneable URL
    endpoint_url: https://github.com/datalad-datasets/machinelearning-books.git
has_part:
  # use the Git blob SHA as ID
  # TODO enable `commit:relpath` type identifier?
  - id: gitsha:f776e30f386b83e13196eab6445f30d3ab54c155
    access_service:
    - https://github.com/datalad-datasets/machinelearning-books.git
qualified_part:
  name: README.md
  entity: gitsha:f776e30f386b83e13196eab6445f30d3ab54c155
